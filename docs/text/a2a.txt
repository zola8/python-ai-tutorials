https://www.youtube.com/watch?v=iWY9bkqLgg4

5:00
currency change agent


- agent card
    - I will send my task if the user asking for currency exchange, because I cannot do it but the remote agent can do it
    - status: in progress, can takes hours to do the job
    - get notification (maybe I need more input to finish the task)
    - continuous or not continuous connection
    - status: completed, final response back + artifacts (text, images)


localhost and 127.0.0.1 are only for outgoing connections.
on your local system localhost does translate into 127.0.0.1, which will always be the IP address of the machine that you are currently using.
For example, on your computer accessing 127.0.0.1 (or localhost) will just attempt to open a connection with your own computer (useful if you're hosting a local web server)

0.0.0.0 is only used for listening (aka "bind") connections, and is a wildcard meaning "listen to all network interfaces on this machine"
Meanwhile, 0.0.0.0 has a different use. On a server or any machine with more than 1 ip address, it can be used to refer to all of the IP addresses that the machine uses.
For example, if you create a simple java application with a serverSocket,
you may want the server socket to listen for incoming connections on all of the servers IP addresses. You would then set the server socket to listen on 0.0.0.0.

------------------------------------------------------------
https://google.github.io/adk-docs/a2a/quickstart-exposing/#getting-the-sample-code          - folder structure
https://a2aprotocol.ai/docs/guide/a2a-number-guessing-game                                  - a2a game with 3 agents
https://github.com/theailanguage/a2a_samples                                                - a2a, mcp

https://github.com/a2aproject/a2a-samples/tree/main/samples/python/agents/helloworld        - google a2a

------------------------------------------------------------
https://deeplearningdispatch.com/2025/08/16/running-multiple-a2a-agents-on-a-single-server/

The Problem: One Server, One Agent Limitation
Traditionally, A2A implementations have been constrained by a “one agent per server” model. This limitation stems from how agents are typically served and discovered within the A2A ecosystem. Developers who wanted to deploy multiple specialized agents had to:

    Set up multiple servers – increasing infrastructure costs
    Use different ports – complicating network configuration
    Manage separate deployments – multiplying maintenance overhead

Multiple Agents, One Host
Imagine running three different agents on the same server:

Agent Type	                Purpose	Agent                   Card URL
Conversational Agent	    General conversation and Q&A	http://localhost:8000/a2a/conversation/agent-card.json
Trending Topics Agent	    Real-time trend analysis	    http://localhost:8000/a2a/trending/agent-card.json
Analyzer Agent	            Data analysis and insights	    http://localhost:8000/a2a/analyzer/agent-card.json
------------------------------------------------------------
https://www.youtube.com/watch?v=mFkw3p5qSuA  - Agent2Agent (A2A) Crash Course: Full Walkthrough With Real Multi-Agent Examples
https://github.com/bhancockio/agent2agent/tree/main/a2a_friend_scheduling
https://youtu.be/mFkw3p5qSuA?si=z5A8beLPnXqiQUQs&t=2406

client <--> 1. fetch agent card                 <-->    A2A Starlette application / Server
            2. analyze agent card                           Agent Executor
            3. build & send message request                     Agent
            4. print agent response

------------------------------------------------------------
